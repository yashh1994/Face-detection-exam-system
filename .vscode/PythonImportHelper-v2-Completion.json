[
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "log_activity",
        "kind": 2,
        "importPath": "Backend.model",
        "description": "Backend.model",
        "peekOfCode": "def log_activity(face_detected, eyes_open, face_count):\n    detection_result.append(face_detected)\n    eye_ratio_result.append(eyes_open)\n    # Update max faces detected if this frame has more\n    global max_faces_detected\n    if face_count > max_faces_detected:\n        max_faces_detected = face_count\nret, frame = cap.read()\nprint(frame)\n# Release the capture and close windows",
        "detail": "Backend.model",
        "documentation": {}
    },
    {
        "label": "face_cascade",
        "kind": 5,
        "importPath": "Backend.model",
        "description": "Backend.model",
        "peekOfCode": "face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\neye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')\n# Initialize video capture\ncap = cv2.VideoCapture(0)\n# Variables for tracking\ndetection_result = []  # Log for each frame if a face is detected\neye_ratio_result = []  # Log for each frame if eyes are open or closed\nmulti_face_times = []  # Log for frames when multiple faces are detected\nno_face_start = None  # Track no-face start time\nno_face_total_time = 0  # Total time with no face detected",
        "detail": "Backend.model",
        "documentation": {}
    },
    {
        "label": "eye_cascade",
        "kind": 5,
        "importPath": "Backend.model",
        "description": "Backend.model",
        "peekOfCode": "eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')\n# Initialize video capture\ncap = cv2.VideoCapture(0)\n# Variables for tracking\ndetection_result = []  # Log for each frame if a face is detected\neye_ratio_result = []  # Log for each frame if eyes are open or closed\nmulti_face_times = []  # Log for frames when multiple faces are detected\nno_face_start = None  # Track no-face start time\nno_face_total_time = 0  # Total time with no face detected\nmax_faces_detected = 0  # Maximum faces detected in a single frame",
        "detail": "Backend.model",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": "Backend.model",
        "description": "Backend.model",
        "peekOfCode": "cap = cv2.VideoCapture(0)\n# Variables for tracking\ndetection_result = []  # Log for each frame if a face is detected\neye_ratio_result = []  # Log for each frame if eyes are open or closed\nmulti_face_times = []  # Log for frames when multiple faces are detected\nno_face_start = None  # Track no-face start time\nno_face_total_time = 0  # Total time with no face detected\nmax_faces_detected = 0  # Maximum faces detected in a single frame\n# Start time of the session\nsession_start = time.time()",
        "detail": "Backend.model",
        "documentation": {}
    },
    {
        "label": "detection_result",
        "kind": 5,
        "importPath": "Backend.model",
        "description": "Backend.model",
        "peekOfCode": "detection_result = []  # Log for each frame if a face is detected\neye_ratio_result = []  # Log for each frame if eyes are open or closed\nmulti_face_times = []  # Log for frames when multiple faces are detected\nno_face_start = None  # Track no-face start time\nno_face_total_time = 0  # Total time with no face detected\nmax_faces_detected = 0  # Maximum faces detected in a single frame\n# Start time of the session\nsession_start = time.time()\n# Logging function\ndef log_activity(face_detected, eyes_open, face_count):",
        "detail": "Backend.model",
        "documentation": {}
    },
    {
        "label": "eye_ratio_result",
        "kind": 5,
        "importPath": "Backend.model",
        "description": "Backend.model",
        "peekOfCode": "eye_ratio_result = []  # Log for each frame if eyes are open or closed\nmulti_face_times = []  # Log for frames when multiple faces are detected\nno_face_start = None  # Track no-face start time\nno_face_total_time = 0  # Total time with no face detected\nmax_faces_detected = 0  # Maximum faces detected in a single frame\n# Start time of the session\nsession_start = time.time()\n# Logging function\ndef log_activity(face_detected, eyes_open, face_count):\n    detection_result.append(face_detected)",
        "detail": "Backend.model",
        "documentation": {}
    },
    {
        "label": "multi_face_times",
        "kind": 5,
        "importPath": "Backend.model",
        "description": "Backend.model",
        "peekOfCode": "multi_face_times = []  # Log for frames when multiple faces are detected\nno_face_start = None  # Track no-face start time\nno_face_total_time = 0  # Total time with no face detected\nmax_faces_detected = 0  # Maximum faces detected in a single frame\n# Start time of the session\nsession_start = time.time()\n# Logging function\ndef log_activity(face_detected, eyes_open, face_count):\n    detection_result.append(face_detected)\n    eye_ratio_result.append(eyes_open)",
        "detail": "Backend.model",
        "documentation": {}
    },
    {
        "label": "no_face_start",
        "kind": 5,
        "importPath": "Backend.model",
        "description": "Backend.model",
        "peekOfCode": "no_face_start = None  # Track no-face start time\nno_face_total_time = 0  # Total time with no face detected\nmax_faces_detected = 0  # Maximum faces detected in a single frame\n# Start time of the session\nsession_start = time.time()\n# Logging function\ndef log_activity(face_detected, eyes_open, face_count):\n    detection_result.append(face_detected)\n    eye_ratio_result.append(eyes_open)\n    # Update max faces detected if this frame has more",
        "detail": "Backend.model",
        "documentation": {}
    },
    {
        "label": "no_face_total_time",
        "kind": 5,
        "importPath": "Backend.model",
        "description": "Backend.model",
        "peekOfCode": "no_face_total_time = 0  # Total time with no face detected\nmax_faces_detected = 0  # Maximum faces detected in a single frame\n# Start time of the session\nsession_start = time.time()\n# Logging function\ndef log_activity(face_detected, eyes_open, face_count):\n    detection_result.append(face_detected)\n    eye_ratio_result.append(eyes_open)\n    # Update max faces detected if this frame has more\n    global max_faces_detected",
        "detail": "Backend.model",
        "documentation": {}
    },
    {
        "label": "max_faces_detected",
        "kind": 5,
        "importPath": "Backend.model",
        "description": "Backend.model",
        "peekOfCode": "max_faces_detected = 0  # Maximum faces detected in a single frame\n# Start time of the session\nsession_start = time.time()\n# Logging function\ndef log_activity(face_detected, eyes_open, face_count):\n    detection_result.append(face_detected)\n    eye_ratio_result.append(eyes_open)\n    # Update max faces detected if this frame has more\n    global max_faces_detected\n    if face_count > max_faces_detected:",
        "detail": "Backend.model",
        "documentation": {}
    },
    {
        "label": "session_start",
        "kind": 5,
        "importPath": "Backend.model",
        "description": "Backend.model",
        "peekOfCode": "session_start = time.time()\n# Logging function\ndef log_activity(face_detected, eyes_open, face_count):\n    detection_result.append(face_detected)\n    eye_ratio_result.append(eyes_open)\n    # Update max faces detected if this frame has more\n    global max_faces_detected\n    if face_count > max_faces_detected:\n        max_faces_detected = face_count\nret, frame = cap.read()",
        "detail": "Backend.model",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "Frontend.my-project.node_modules.flatted.python.flatted",
        "description": "Frontend.my-project.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "Frontend.my-project.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "Frontend.my-project.node_modules.flatted.python.flatted",
        "description": "Frontend.my-project.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "Frontend.my-project.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "Frontend.my-project.node_modules.flatted.python.flatted",
        "description": "Frontend.my-project.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "Frontend.my-project.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "Frontend.my-project.node_modules.flatted.python.flatted",
        "description": "Frontend.my-project.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "Frontend.my-project.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "Frontend.my-project.node_modules.flatted.python.test",
        "description": "Frontend.my-project.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "Frontend.my-project.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Frontend.my-project.node_modules.flatted.python.test",
        "description": "Frontend.my-project.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "Frontend.my-project.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "Frontend.my-project.node_modules.flatted.python.test",
        "description": "Frontend.my-project.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "Frontend.my-project.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "Frontend.my-project.node_modules.flatted.python.test",
        "description": "Frontend.my-project.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "Frontend.my-project.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Frontend.my-project.node_modules.flatted.python.test",
        "description": "Frontend.my-project.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "Frontend.my-project.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "Frontend.my-project.node_modules.flatted.python.test",
        "description": "Frontend.my-project.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "Frontend.my-project.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "Frontend.my-project.node_modules.flatted.python.test",
        "description": "Frontend.my-project.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "Frontend.my-project.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "Frontend.my-project.node_modules.flatted.python.test",
        "description": "Frontend.my-project.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "Frontend.my-project.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "Frontend.my-project.node_modules.flatted.python.test",
        "description": "Frontend.my-project.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "Frontend.my-project.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "Frontend.my-project.node_modules.flatted.python.test",
        "description": "Frontend.my-project.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "Frontend.my-project.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "Frontend.my-project.node_modules.flatted.python.test",
        "description": "Frontend.my-project.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "Frontend.my-project.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "Frontend.my-project.node_modules.flatted.python.test",
        "description": "Frontend.my-project.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "Frontend.my-project.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "Frontend.my-project.node_modules.flatted.python.test",
        "description": "Frontend.my-project.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "Frontend.my-project.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "Frontend.my-project.node_modules.flatted.python.test",
        "description": "Frontend.my-project.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "Frontend.my-project.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "Frontend.my-project.node_modules.flatted.python.test",
        "description": "Frontend.my-project.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "Frontend.my-project.node_modules.flatted.python.test",
        "documentation": {}
    }
]