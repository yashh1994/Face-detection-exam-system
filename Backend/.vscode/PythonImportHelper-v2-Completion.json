[
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "orm_model",
        "description": "orm_model",
        "isExtraImport": true,
        "detail": "orm_model",
        "documentation": {}
    },
    {
        "label": "Migrate",
        "importPath": "flask_migrate",
        "description": "flask_migrate",
        "isExtraImport": true,
        "detail": "flask_migrate",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "StudentLog",
        "kind": 6,
        "importPath": "model_process",
        "description": "model_process",
        "peekOfCode": "class StudentLog:\n    def __init__(self):\n        self.detection_result = []\n        self.eye_ratio_result = []\n        self.multi_face_times = []\n        self.no_face_start = None\n        self.no_face_total_time = 0\n        self.max_faces_detected = 0\n        self.session_start = time.time()\n    def log_activity(self, face_detected, eyes_open, face_count):",
        "detail": "model_process",
        "documentation": {}
    },
    {
        "label": "end_process",
        "kind": 2,
        "importPath": "model_process",
        "description": "model_process",
        "peekOfCode": "def end_process(studentId):\n    if studentId in student_logs:\n        return student_logs[studentId].to_json()\n    else:\n        return {\"message\": \"Student log not found\"}\ndef process_frame(frame,studentId):\n    if studentId not in student_logs:\n        student_logs[studentId] = StudentLog()\n    log = student_logs[studentId]\n    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)",
        "detail": "model_process",
        "documentation": {}
    },
    {
        "label": "process_frame",
        "kind": 2,
        "importPath": "model_process",
        "description": "model_process",
        "peekOfCode": "def process_frame(frame,studentId):\n    if studentId not in student_logs:\n        student_logs[studentId] = StudentLog()\n    log = student_logs[studentId]\n    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n    # Detect faces\n    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))\n    face_count = len(faces)\n    face_detected = face_count > 0\n    # Track no-face periods",
        "detail": "model_process",
        "documentation": {}
    },
    {
        "label": "face_cascade",
        "kind": 5,
        "importPath": "model_process",
        "description": "model_process",
        "peekOfCode": "face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\neye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')\nstudent_logs = {}\n# ! Routes \n#! Student class\nclass StudentLog:\n    def __init__(self):\n        self.detection_result = []\n        self.eye_ratio_result = []\n        self.multi_face_times = []",
        "detail": "model_process",
        "documentation": {}
    },
    {
        "label": "eye_cascade",
        "kind": 5,
        "importPath": "model_process",
        "description": "model_process",
        "peekOfCode": "eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')\nstudent_logs = {}\n# ! Routes \n#! Student class\nclass StudentLog:\n    def __init__(self):\n        self.detection_result = []\n        self.eye_ratio_result = []\n        self.multi_face_times = []\n        self.no_face_start = None",
        "detail": "model_process",
        "documentation": {}
    },
    {
        "label": "student_logs",
        "kind": 5,
        "importPath": "model_process",
        "description": "model_process",
        "peekOfCode": "student_logs = {}\n# ! Routes \n#! Student class\nclass StudentLog:\n    def __init__(self):\n        self.detection_result = []\n        self.eye_ratio_result = []\n        self.multi_face_times = []\n        self.no_face_start = None\n        self.no_face_total_time = 0",
        "detail": "model_process",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "orm_model",
        "description": "orm_model",
        "peekOfCode": "class User(Base):\n    __tablename__ = 'Users'\n    id = Column(Integer, primary_key=True)\n    name = Column(String(80),nullable=False)\n    email = Column(String(120),nullable=False,unique=True)\n    password = Column(String(128),nullable=False)\n    def __init__(self,name,email,password):\n        self.name = name\n        self.email = email\n        self.password = self.hash_password(password)",
        "detail": "orm_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "orm_model",
        "description": "orm_model",
        "peekOfCode": "Base = declarative_base()\nclass User(Base):\n    __tablename__ = 'Users'\n    id = Column(Integer, primary_key=True)\n    name = Column(String(80),nullable=False)\n    email = Column(String(120),nullable=False,unique=True)\n    password = Column(String(128),nullable=False)\n    def __init__(self,name,email,password):\n        self.name = name\n        self.email = email",
        "detail": "orm_model",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "routes",
        "description": "routes",
        "peekOfCode": "def signup():\n    session = Session()\n    data = request.get_json()\n    name = data.get('name')\n    email = data.get('email')\n    password = data.get('password')\n    if not name or not email or not password:\n        return jsonify({\"error\": \"Name, email and password are required.\"}), 400\n    if session.query(User).filter_by(email=email).first() or session.query(User).filter_by(name=name).first():\n        return jsonify({\"error\": \"User with this name or email already exists.\"}), 400",
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "routes",
        "description": "routes",
        "peekOfCode": "def login():\n    session = Session()\n    data = request.get_json()\n    name = data.get('name')\n    email = data.get('email')\n    if not name or not email:\n        return jsonify({\"error\": \"Name and email are required.\"}), 400\n    user = session.query(User).filter_by(name=name, email=email).first()\n    session.close()\n    if not user:",
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "hello_api",
        "kind": 2,
        "importPath": "routes",
        "description": "routes",
        "peekOfCode": "def hello_api(name):\n    return f'Hello {name}.'\n@app.route('/process_frame', methods=['POST'])\ndef process_frame_route():\n    data = request.json\n    student_id = data.get(\"student_id\")\n    frame = data.get(\"frame\")\n    modi_frame = np.array(frame, dtype=np.uint8)\n    process_frame(frame=modi_frame, studentId=student_id)\n    return {\"message\": \"Frame processed\"}",
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "process_frame_route",
        "kind": 2,
        "importPath": "routes",
        "description": "routes",
        "peekOfCode": "def process_frame_route():\n    data = request.json\n    student_id = data.get(\"student_id\")\n    frame = data.get(\"frame\")\n    modi_frame = np.array(frame, dtype=np.uint8)\n    process_frame(frame=modi_frame, studentId=student_id)\n    return {\"message\": \"Frame processed\"}\n@app.route('/end_process', methods=['GET'])\ndef end_process_route():\n    student_id = request.args.get('student_id')",
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "end_process_route",
        "kind": 2,
        "importPath": "routes",
        "description": "routes",
        "peekOfCode": "def end_process_route():\n    student_id = request.args.get('student_id')\n    return end_process(studentId=student_id)",
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "routes",
        "description": "routes",
        "peekOfCode": "app = Flask(__name__)   \nCORS(app)\nsome_variable = os.getenv('PG_DATABASE_URL')\nengine = create_engine(some_variable)\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n#! Routes for Authentication\n@app.route('/signup', methods=['POST'])\ndef signup():\n    session = Session()",
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "some_variable",
        "kind": 5,
        "importPath": "routes",
        "description": "routes",
        "peekOfCode": "some_variable = os.getenv('PG_DATABASE_URL')\nengine = create_engine(some_variable)\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n#! Routes for Authentication\n@app.route('/signup', methods=['POST'])\ndef signup():\n    session = Session()\n    data = request.get_json()\n    name = data.get('name')",
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "routes",
        "description": "routes",
        "peekOfCode": "engine = create_engine(some_variable)\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\n#! Routes for Authentication\n@app.route('/signup', methods=['POST'])\ndef signup():\n    session = Session()\n    data = request.get_json()\n    name = data.get('name')\n    email = data.get('email')",
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "Session",
        "kind": 5,
        "importPath": "routes",
        "description": "routes",
        "peekOfCode": "Session = sessionmaker(bind=engine)\n#! Routes for Authentication\n@app.route('/signup', methods=['POST'])\ndef signup():\n    session = Session()\n    data = request.get_json()\n    name = data.get('name')\n    email = data.get('email')\n    password = data.get('password')\n    if not name or not email or not password:",
        "detail": "routes",
        "documentation": {}
    }
]