[
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "log_activity",
        "kind": 2,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "def log_activity(face_detected, eyes_open, face_count):\n    detection_result.append(face_detected)\n    eye_ratio_result.append(eyes_open)\n    # Update max faces detected if this frame has more\n    global max_faces_detected\n    if face_count > max_faces_detected:\n        max_faces_detected = face_count\nret, frame = cap.read()\nprint(frame)\n# Release the capture and close windows",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "face_cascade",
        "kind": 5,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\neye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')\n# Initialize video capture\ncap = cv2.VideoCapture(0)\n# Variables for tracking\ndetection_result = []  # Log for each frame if a face is detected\neye_ratio_result = []  # Log for each frame if eyes are open or closed\nmulti_face_times = []  # Log for frames when multiple faces are detected\nno_face_start = None  # Track no-face start time\nno_face_total_time = 0  # Total time with no face detected",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "eye_cascade",
        "kind": 5,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')\n# Initialize video capture\ncap = cv2.VideoCapture(0)\n# Variables for tracking\ndetection_result = []  # Log for each frame if a face is detected\neye_ratio_result = []  # Log for each frame if eyes are open or closed\nmulti_face_times = []  # Log for frames when multiple faces are detected\nno_face_start = None  # Track no-face start time\nno_face_total_time = 0  # Total time with no face detected\nmax_faces_detected = 0  # Maximum faces detected in a single frame",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "cap",
        "kind": 5,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "cap = cv2.VideoCapture(0)\n# Variables for tracking\ndetection_result = []  # Log for each frame if a face is detected\neye_ratio_result = []  # Log for each frame if eyes are open or closed\nmulti_face_times = []  # Log for frames when multiple faces are detected\nno_face_start = None  # Track no-face start time\nno_face_total_time = 0  # Total time with no face detected\nmax_faces_detected = 0  # Maximum faces detected in a single frame\n# Start time of the session\nsession_start = time.time()",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "detection_result",
        "kind": 5,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "detection_result = []  # Log for each frame if a face is detected\neye_ratio_result = []  # Log for each frame if eyes are open or closed\nmulti_face_times = []  # Log for frames when multiple faces are detected\nno_face_start = None  # Track no-face start time\nno_face_total_time = 0  # Total time with no face detected\nmax_faces_detected = 0  # Maximum faces detected in a single frame\n# Start time of the session\nsession_start = time.time()\n# Logging function\ndef log_activity(face_detected, eyes_open, face_count):",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "eye_ratio_result",
        "kind": 5,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "eye_ratio_result = []  # Log for each frame if eyes are open or closed\nmulti_face_times = []  # Log for frames when multiple faces are detected\nno_face_start = None  # Track no-face start time\nno_face_total_time = 0  # Total time with no face detected\nmax_faces_detected = 0  # Maximum faces detected in a single frame\n# Start time of the session\nsession_start = time.time()\n# Logging function\ndef log_activity(face_detected, eyes_open, face_count):\n    detection_result.append(face_detected)",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "multi_face_times",
        "kind": 5,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "multi_face_times = []  # Log for frames when multiple faces are detected\nno_face_start = None  # Track no-face start time\nno_face_total_time = 0  # Total time with no face detected\nmax_faces_detected = 0  # Maximum faces detected in a single frame\n# Start time of the session\nsession_start = time.time()\n# Logging function\ndef log_activity(face_detected, eyes_open, face_count):\n    detection_result.append(face_detected)\n    eye_ratio_result.append(eyes_open)",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "no_face_start",
        "kind": 5,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "no_face_start = None  # Track no-face start time\nno_face_total_time = 0  # Total time with no face detected\nmax_faces_detected = 0  # Maximum faces detected in a single frame\n# Start time of the session\nsession_start = time.time()\n# Logging function\ndef log_activity(face_detected, eyes_open, face_count):\n    detection_result.append(face_detected)\n    eye_ratio_result.append(eyes_open)\n    # Update max faces detected if this frame has more",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "no_face_total_time",
        "kind": 5,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "no_face_total_time = 0  # Total time with no face detected\nmax_faces_detected = 0  # Maximum faces detected in a single frame\n# Start time of the session\nsession_start = time.time()\n# Logging function\ndef log_activity(face_detected, eyes_open, face_count):\n    detection_result.append(face_detected)\n    eye_ratio_result.append(eyes_open)\n    # Update max faces detected if this frame has more\n    global max_faces_detected",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "max_faces_detected",
        "kind": 5,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "max_faces_detected = 0  # Maximum faces detected in a single frame\n# Start time of the session\nsession_start = time.time()\n# Logging function\ndef log_activity(face_detected, eyes_open, face_count):\n    detection_result.append(face_detected)\n    eye_ratio_result.append(eyes_open)\n    # Update max faces detected if this frame has more\n    global max_faces_detected\n    if face_count > max_faces_detected:",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "session_start",
        "kind": 5,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "session_start = time.time()\n# Logging function\ndef log_activity(face_detected, eyes_open, face_count):\n    detection_result.append(face_detected)\n    eye_ratio_result.append(eyes_open)\n    # Update max faces detected if this frame has more\n    global max_faces_detected\n    if face_count > max_faces_detected:\n        max_faces_detected = face_count\nret, frame = cap.read()",
        "detail": "model",
        "documentation": {}
    }
]