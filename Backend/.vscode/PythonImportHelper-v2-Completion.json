[
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "StudentLog",
        "kind": 6,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "class StudentLog:\n    def __init__(self):\n        self.detection_result = []\n        self.eye_ratio_result = []\n        self.multi_face_times = []\n        self.no_face_start = None\n        self.no_face_total_time = 0\n        self.max_faces_detected = 0\n        self.session_start = time.time()\n    def log_activity(self, face_detected, eyes_open, face_count):",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "end_process",
        "kind": 2,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "def end_process(studentId):\n    if studentId in student_logs:\n        return student_logs[studentId].to_json()\n    else:\n        return {\"message\": \"Student log not found\"}\ndef process_frame(frame,studentId):\n    if studentId not in student_logs:\n        student_logs[studentId] = StudentLog()\n    log = student_logs[studentId]\n    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "process_frame",
        "kind": 2,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "def process_frame(frame,studentId):\n    if studentId not in student_logs:\n        student_logs[studentId] = StudentLog()\n    log = student_logs[studentId]\n    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n    # Detect faces\n    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))\n    face_count = len(faces)\n    face_detected = face_count > 0\n    # Track no-face periods",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "student_logs",
        "kind": 5,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "student_logs = {}\nclass StudentLog:\n    def __init__(self):\n        self.detection_result = []\n        self.eye_ratio_result = []\n        self.multi_face_times = []\n        self.no_face_start = None\n        self.no_face_total_time = 0\n        self.max_faces_detected = 0\n        self.session_start = time.time()",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "face_cascade",
        "kind": 5,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\neye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')\n# Initialize video capture\n# cap = cv2.VideoCapture(0)\n# Variables for tracking\n# detection_result = []  # Log for each frame if a face is detected\n# eye_ratio_result = []  # Log for each frame if eyes are open or closed\n# multi_face_times = []  # Log for frames when multiple faces are detected\n# no_face_start = None  # Track no-face start time\n# no_face_total_time = 0  # Total time with no face detected",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "eye_cascade",
        "kind": 5,
        "importPath": "model",
        "description": "model",
        "peekOfCode": "eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')\n# Initialize video capture\n# cap = cv2.VideoCapture(0)\n# Variables for tracking\n# detection_result = []  # Log for each frame if a face is detected\n# eye_ratio_result = []  # Log for each frame if eyes are open or closed\n# multi_face_times = []  # Log for frames when multiple faces are detected\n# no_face_start = None  # Track no-face start time\n# no_face_total_time = 0  # Total time with no face detected\n# max_faces_detected = 0  # Maximum faces detected in a single frame",
        "detail": "model",
        "documentation": {}
    }
]